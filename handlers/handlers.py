from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.state import State
from aiogram.fsm.context import FSMContext


from keyboards.kb import main_kb, settings_kb, add_city_kb, send_user_message
from database.db import init_db, has_city, get_city, add_city, update_city
from States.state import UserOptions
from request.request import get_current_weather
from import_bot import bot

router = Router()

init_db()

@router.message(CommandStart())
async def start(message: Message):
    await message.answer("""
    –ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–ø–æ–≥–æ–¥–Ω–∏–∫. üå§Ô∏è

–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É!

–Ø –º–æ–≥—É:
- –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É.
- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–≥–æ–¥–æ–π.
- –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:

    """, reply_markup=main_kb)

@router.message(F.text == "–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞")
async def current_weather(message: Message):
    user_id = message.from_user.id

    if has_city(user_id):
        city = get_city(user_id)
        current = await get_current_weather(city, message)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≥–æ—Ä–æ–¥", reply_markup=add_city_kb)


@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message):
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=settings_kb)

@router.message(F.text == "–ú–æ–π –≥–æ—Ä–æ–¥")
async def my_city(message: Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if has_city(user_id):
        city = get_city(user_id)
        await message.answer(f"–í–∞—à –≥–æ—Ä–æ–¥: {city}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≥–æ—Ä–æ–¥", reply_markup=add_city_kb)

@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
async def change_city(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥")
    await state.set_state(UserOptions.user_city)

@router.message(UserOptions.user_city)
async def input_city(message: Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await state.update_data(user_city=message.text)
    data = await state.get_data()
    user_city = data.get('user_city')
    
    if has_city(user_id):
        update_city(user_id, user_city)
    else:
        add_city(user_id, user_city)
    
    await state.clear()
    await message.answer(f"–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤–∞—à –≥–æ—Ä–æ–¥ —ç—Ç–æ: {user_city}", reply_markup=main_kb)

@router.callback_query(F.data == "add_user_city")
async def change_city_inline(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥")
    await state.set_state(UserOptions.user_city)

@router.message(UserOptions.user_city)
async def get_city_inline(message: Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await state.update_data(user_city=message.text)
    data = await state.get_data()
    user_city = data.get('user_city')
    
    if has_city(user_id):
        update_city(user_id, user_city)
    else:
        add_city(user_id, user_city)
    
    await state.clear()
    await message.answer(f"–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤–∞—à –≥–æ—Ä–æ–¥ —ç—Ç–æ: {user_city}", reply_markup=main_kb)

@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def notification_settings(message: Message):
    user_id = message.from_user.id

    if has_city(user_id):
        city = get_city(user_id)
        await subcribe(city, message)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≥–æ—Ä–æ–¥", reply_markup=add_city_kb)

@router.message(F.text == "–û—Ç–∑—ã–≤ | —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
async def help(message: Message, state: FSMContext):
    await state.set_state(UserOptions.user_message)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É –∏–ª–∏ —Å–≤–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞ –ø—Ä—è–º—É—é —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º.") # ! —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫ —á—Ç–æ–±—ã –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Ç–æ–º –±–æ—Ç –ø–∏—Å–∞–ª "—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?" –∏ –¥–≤–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–∞ –Ω–µ—Ç.

@router.message(UserOptions.user_message)
async def get_user_message(message: Message, state: FSMContext):
    await state.update_data(user_message=message.text)

    data = await state.get_data()
    user_message = data.get('user_message')

    await message.answer(f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{user_message}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=send_user_message)

@router.callback_query(F.data == "yes_send")
async def send_help_message(callback_query: CallbackQuery, state: FSMContext):

    owner_id = 0 # your telegram id

    data = await state.get_data()

    user_message = data.get('user_message')
    await state.clear()

    await bot.send_message(owner_id, f"–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{user_message}")


    await callback_query.message.answer(f"–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_message}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!")

@router.callback_query(F.data == "no_send")
async def no_send_help_message(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.answer("–û—Ç–º–µ–Ω–∞")
